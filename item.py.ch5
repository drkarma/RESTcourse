import sqlite3
from flask_jwt import JWT, jwt_required, current_identity
from flask_restful import Resource, Api, reqparse


class Item(Resource):
    parser = reqparse.RequestParser()
    parser.add_argument('price',
                        type=float,
                        required=True,
                        help="Can't be left blank"
                        )

   # @jwt_required()
    def get(self, name):
        item = self.find_by_name(name)
        if item:
            return item
        return { "message": "Could not find item"}, 404


        #item = list(filter(lambda x: x['name']== name, items))
        #item = next(filter(lambda x: x['name']== name, items), None)

        #return {'item': item}, 200 if item is not None else 404
        # for item in items:
        #     if item['name'] == name:
        #         return item
        # return {'item': None    }, 404
    @classmethod
    def find_by_name(cls, name):
        connection = sqlite3.connect("data.db")
        cursor = connection.cursor()
        query = "SELECT * FROM items WHERE name=?"
        result = cursor.execute(query, (name,))
        row = result.fetchone()

        connection.close()

        if row:
            return {"item": {
                "name": row[0],
                "price": row[1]
                }
            }
        #return False # No item exist
    @classmethod
    def insert(cls, item):
        connection = sqlite3.connect("data.db")
        cursor = connection.cursor()
        query = "INSERT INTO items VALUES (?, ?)"
        cursor.execute(query, (item['name'], item['price']))
        connection.commit()
        connection.close()
    @classmethod
    def update(cls, item):
        connection = sqlite3.connect("data.db")
        cursor = connection.cursor()
        query = "UPDATE items SET price=? WHERE name=?"
        cursor.execute(query, (item['price'], item['name']))
        connection.commit()
        connection.close()

    def post(self, name):
        if self.find_by_name(name):
            return {"message": "Item already exists in database"}, 400

        data = Item.parser.parse_args()
        item = {'name': name, "price": data['price']}
        try:
            self.insert(item)
            return item, 201
        except:
            return {"message": "Failed adding new item to database"}




    def delete(self,name):
        connection = sqlite3.connect("data.db")
        cursor = connection.cursor()
        query = "DELETE FROM items WHERE name=?"
        cursor.execute(query, (name,))
        connection.commit()
        connection.close()

        return { 'message': 'item {} was deleted'.format(name)}

    def put(self, name):
        data = Item.parser.parse_args()

        item = self.find_by_name(name)
        updated_item = {'name': name, 'price': data['price']}
        if item is None:
            try:
                self.insert(updated_item)
            except:
                return {"message": "An error occurred when trying to insert item"}, 500
        else:
            try:
                self.update(updated_item)
            except:
                return {"message": "An error occurred when trying to update item"}, 500

        return updated_item


class ItemList(Resource):
    def get(self):
        connection = sqlite3.connect("data.db")
        cursor = connection.cursor()
        query = "SELECT * FROM items"
        result = cursor.execute(query)
        items =[]
        for row in result:
            items.append({"name": row[0], "price": row[1]})

        connection.close()


        return {"items": items }